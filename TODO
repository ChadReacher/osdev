Filesystem:
  * [DONE] Implement pipe as file system
  * [DONE] Implement VFS
    - Research, get more knowledge about working with devices: character- and block-devices
  * [DONE] Support symbolink links in Ext2
  * Implement second file system:
    - Implement MSDOS/FAT32(16)
    - Implement mount() syscall
    - Implement umount() syscall
  * Implement FIFO
  * Implement sockets

Scheduling:
  * [DONE] What about signals? Improve signal management?
  * Make the kernel preemptive?

Memory management:
  * Refactor?
  * Improve?
  * Introduce zones in virtual memory

Core:
  * Introduce multi-user support
  * Introduce password authentication
  * Introduce dynamic libraries
  * Introduce dynamic loader
  * Add bootinfo structure and pass it from bootloader to kernel
  * Write code to load kernel which size is bigger than 250 sectors

Devices:
  * Implement several TTYs
  * Implement block cache
  * Implement devfs?

Misc:
  * Networking (sockets, after implementing default Unix Domain sockets)
  * Add mkdir -p build directory to Makefile 
  * Add doxygen or another style for comments for functions
  * Add documentation
  * Improve user infrastructure
  * Improve build infrastructure
  * Introduce safe power off
  * Resource scarce OS testing (too many processes, not enough space, etc.)
  * Introduce threads
  * Introduce asynchronous functions
  * Introduce even-driven architecture

Plan:
* [DONE] Implement pipe as file system
* [DONE] Support symlinks for ext2
* [DONE] Finish implementing VFS (character and block device operations)
* ...
* [DONE] Improve/revise/simplify/rewrite scheduling algorithm
* [DONE] Improve/revise signals implementation
* ...
* [DONE] Introduce block cache
* Implement truncate(2) syscall
* ...
* Introduce memory zones? mmap(2) syscall?
* ...
* Implement Unix domain sockets
* Implement networking sockets
* ...
* Implement MSDOS/FAT32(16) file system
* Implement mount() syscall
* Implement umount() syscall
* ...
* Implement SMP
* Implement threads
* Implement async routines


Open questions/TODOs:
* Where should I perform path resolution? ('./', '../', '././', '/a/..', '/a/b/.././../././', '/hello/', '////hello/////', './///hello/././///..////.//')
* Do we need 'need_resched'. For now, it is used only in 'process_wakeup' routine. It means that we enable the scheduler to work when we we wake up a process.
