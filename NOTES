The whole operating system is in `boot.img` that consists of:
* bootloader.bin
* kernel.bin


[DONE] dev/pci.c:51:   dev = pci_get_device(0x8086, 0x7010, -1);
dev/screen.c:14:        map_page((void *)0xA000, (void *)0xFE000000, PAGING_FLAG_PRESENT);
dev/screen.c:20:        for (i = 0, fb_start = 0xFD000000; i < fb_size_in_pages; ++i, fb_start += PAGE_SIZE) {
dev/console.c:255:      phys_addr = 0xB8000;
dev/console.c:18:#define SCREEN_START 0xFE000000
dev/console.c:19:#define SCREEN_END     0xFE008000
proc/scheduler.c:174:   idle_process->directory = virtual_to_physical((void *)0xFFFFF000);
mmu/pmm.c:96:   _pmm_init(0xC0030000, total_memory_bytes);
mmu/pmm.c:107:  mark_memory_as_used(0xA000, 0x800);     /* Mark font as used memory */
mmu/pmm.c:110:  mark_memory_as_used(0x10000, 0x25000);
mmu/pmm.c:115:  mark_memory_as_used(0x26000, 1);
mmu/paging.c:42:        page_table_t *table = (page_table_t *)(0xFFC00000 + (PAGE_DIR_INDEX((u32)virt_addr) << 12));
mmu/paging.c:112:       table = (page_table_t *)(0xFFC00000 + (PAGE_DIR_INDEX((u32)virt_addr) << 12));
mmu/paging.c:140:       map_page(page_dir_phys, (void *)0xE0000000, PAGING_FLAG_PRESENT | PAGING_FLAG_WRITEABLE);


readdir(struct ext2_inode *inode, struct file *fp, struct dirent *dent);
file_read(struct ext2_inode *inode, struct file *fp, i8 *buf, i32 count);
file_write(struct ext2_inode *inode, struct file *fp, i8 *buf, i32 count);
unlink
link
rename
rmdir
mkdir
